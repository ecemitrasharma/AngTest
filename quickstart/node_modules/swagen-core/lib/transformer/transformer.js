'use strict';

const library = require('./library');

module.exports = class Transformer {
    constructor(profile) {
        this.profile = profile;
    }

    transformDefinition(definition) {
        // Transform all enum names in the definition
        for (let e in definition.enums) {
            let transformedName = this.modelName(e, {});
            if (transformedName === e) {
                continue;
            }
            if (definition.enums[transformedName]) {
                throw new Error(`Cannot transform enum named '${e}'. The transformed name is '${transformedName}', which already exists.`);
            }
            let enumValue = definition.enums[e];
            delete definition.enums[e];
            definition.enums[transformedName] = enumValue;
        }

        // Transform all model names in the definition
        for (let m in definition.models) {
            let transformedName = this.modelName(m, {});
            if (transformedName === m) {
                continue;
            }
            if (definition.models[transformedName]) {
                throw new Error(`Cannot transform model named '${m}'. The transformed name is '${transformedName}', which already exists.`)
            }
            let model = definition.models[m];
            delete definition.models[m];
            definition.models[transformedName] = model;
        }

        // Update all enum/complex property types in the models
        for (let m in definition.models) {
            for (let p in definition.models[m]) {
                let property = definition.models[m][p];
                if (property.enum) {
                    property.enum = this.modelName(property.enum, {});
                } else if (property.complex) {
                    property.complex = this.modelName(property.complex, {});
                }
            }
        }

        // Update all parameter/response types in operations
        for (let s in definition.services) {
            let service = definition.services[s];
            for (let o in service) {
                let operation = service[o];
                for (let i = 0; i < operation.parameters.length; i++) {
                    if (operation.parameters[i].dataType.enum) {
                        operation.parameters[i].dataType.enum = this.modelName(operation.parameters[i].dataType.enum, {});
                    } else if (operation.parameters[i].dataType.complex) {
                        operation.parameters[i].dataType.complex = this.modelName(operation.parameters[i].dataType.complex, {});
                    }
                }
                for (let r in operation.responses) {
                    let response = operation.responses[r];
                    if (response.dataType) {
                        if (response.dataType.enum) {
                            response.dataType.enum = this.modelName(response.dataType.enum);
                        } else if (response.dataType.complex) {
                            response.dataType.complex = this.modelName(response.dataType.complex);
                        }
                    }
                }
            }
        }
    }

    modelName(modelName, details) {
        return this.internalTransform('modelName', modelName, details);
    }

    propertyName(propertyName, details) {
        let transform = this.profile.transforms.propertyName;
        if (typeof transform === 'function') {
            return transform(propertyName, details);
        }
        if (typeof transform === 'string') {
            let matchedTransform = library.propertyName.find(t => t.name === transform);
            return matchedTransform ? matchedTransform.transformer(propertyName, details) : propertyName;
        }
        return propertyName;
    }

    operationName(operationName, details) {
        let transform = this.profile.transforms.operationName;
        if (typeof transform === 'function') {
            return transform(operationName, details);
        }
        if (typeof transform === 'string') {
            let matchedTransform = library.operationName.find(t => t.name === transform);
            return matchedTransform ? matchedTransform.transformer(operationName, details) : operationName;
        }
        return operationName;
    }

    serviceName(serviceName, details) {
        let transform = this.profile.transforms.serviceName;
        if (typeof transform === 'function') {
            return transform(serviceName, details);
        }
        if (typeof transform === 'string') {
            let matchedTransform = library.serviceName.find(t => t.name === transform);
            return matchedTransform ? matchedTransform.transformer(serviceName, details) : serviceName;
        }
        return serviceName;
    }

    internalTransform(targetType, targetName, details) {
        let transform = this.profile.transforms[targetType];
        if (typeof transform === 'function') {
            return transform(targetName, details);
        }
        if (typeof transform === 'string') {
            let libraryTransform = library[targetType].find(t => t.name === transform);
            return libraryTransform ? libraryTransform.transformer(targetName, details) : targetName;
        }
        return targetName;
    }
}
