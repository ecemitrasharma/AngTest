'use strict';

const os = require('os');

const cli = require('../cli');

module.exports = class CodeBuilder {
    constructor(options) {
        options = options || {};
        this.code = options.code || [];
        this.currentLine = '';
        this.indentSize = options.indentSize || 4;
        this.currentIndent = 0;
    }

    /**
     * Indents the current indent level.
     * @param {string} code - If specified, code is added after indenting
     * */
    indent(code) {
        this.currentIndent += this.indentSize;
        if (code) {
            this.line(code);
        }
        return this;
    }

    /**
     * Unindents the current indent level.
     * @param {string} code - If specified, code is added after unindenting.
     */
    unindent(code) {
        this.currentIndent -= this.indentSize;
        if (this.currentIndent < 0) {
            this.currentIndent = 0;
            cli.warn(`CodeBuilder indent has become negative.`);
        }
        if (code) {
            this.line(code);
        }
        return this;
    }

    line(...code) {
        for (let i = 0; i < (code || []).length; i++) {
            this.code.push(' '.repeat(this.currentIndent) + code[i]);
        }
        return this;
    }

    lineIf(condition, ...code) {
        if (condition) {
            this.line(code);
        }
        return this;
    }

    inline(code, condition) {
        if (condition == undefined || (condition != undefined && condition)) {
            this.currentLine = (this.currentLine || '') + code;
        }
        return this;
    }

    done() {
        if (this.currentLine) {
            this.code.push(' '.repeat(this.currentIndent) + this.currentLine);
            this.currentLine = '';
        }
        return this;
    }

    blank() {
        this.code.push('');
        return this;
    }

    repeat(arr, fn) {
        for (let i = 0; i < (arr || []).length; i++) {
            fn(this, arr[i], i);
        }
        return this;
    }

    toCode() {
        return this.code.join(os.EOL);
    }
}
