'use strict';

const library = require('./library');

module.exports = class Transformer {
    constructor(profile) {
        this.profile = profile;
    }

    modelName(modelName, details) {
        let transform = this.profile.transforms.modelName;
        if (typeof transform === 'function') {
            return transform(modelName, details);
        }
        if (typeof transform === 'string') {
            let matchedTransform = library.modelName.find(t => t.name === transform);
            return matchedTransform ? matchedTransform.transformer(modelName, details) : operationName;
        }
        return modelName;
    }

    propertyName(propertyName, details) {
        let transform = this.profile.transforms.propertyName;
        if (typeof transform === 'function') {
            return transform(propertyName, details);
        }
        if (typeof transform === 'string') {
            let matchedTransform = library.propertyName.find(t => t.name === transform);
            return matchedTransform ? matchedTransform.transformer(propertyName, details) : operationName;
        }
        return propertyName;
    }

    operationName(operationName, details) {
        let transform = this.profile.transforms.operationName;
        if (typeof transform === 'function') {
            return transform(operationName, details);
        }
        if (typeof transform === 'string') {
            let matchedTransform = library.operationName.find(t => t.name === transform);
            return matchedTransform ? matchedTransform.transformer(operationName, details) : operationName;
        }
        return operationName;
    }

    serviceName(serviceName, details) {
        let transform = this.profile.transforms.serviceName;
        if (typeof transform === 'function') {
            return transform(serviceName, details);
        }
        if (typeof transform === 'string') {
            let matchedTransform = library.serviceName.find(t => t.name === transform);
            return matchedTransform ? matchedTransform.transformer(serviceName, details) : operationName;
        }
        return serviceName;
    }
}
